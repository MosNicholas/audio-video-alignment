name: "siamese_caffenet_train_val"
# Changes made: changed softmax to sigmoid cross entropy
# Improvements to try: xavier
#layer {
#  name: "pair_data"
#  type: "HDF5Data"
#  top: "left"
#  top: "right"
#  top: "label"
#  include {
#    phase: TRAIN
#  }
#  hdf5_data_param {
#    source: "/mnt/data/dataset_prepared/examples_train.txt"
#    batch_size: 64
#  }
#}
#layer {
#  name: "pair_data"
#  type: "HDF5Data"
#  top: "left"
#  top: "right"
#  top: "label"
#  include {
#    phase: TEST
#  }
#  hdf5_data_param {
#    source: "/mnt/data/dataset_prepared/examples_test.txt"
#    batch_size: 64
#  }
#}

layer {
  name: "dummy"
  type: "DummyData"
  top: "left"
  top: "right"
  top: "label"
  dummy_data_param {
    shape { dim: 64 dim: 1 dim: 10 dim: 64 dim: 96 }
    shape { dim: 64 dim: 1 dim: 10 dim: 64 dim: 96 }
    shape { dim: 64 dim: 1 dim: 1 dim: 1 dim: 1 }
  }
}

# CaffeNet

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "left"
  top: "conv1"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 100
    kernel_size: 3 
    kernel_size: 7
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "reshape1"
  type: "Reshape"
  bottom: "conv1"
  top: "reshape1"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 0
      dim: -1 # infer it from the other dimensions
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "reshape1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 1
    kernel_size: 3
    stride: 1
    stride: 3
  }
}

layer {
  name: "reshape2"
  type: "Reshape"
  bottom: "pool1"
  top: "reshape2"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 5
      dim: 12 # infer it from the other dimensions
      dim: -1
    }
  }
}

layer {
  name: "norm1"
  type: "LRN"
  bottom: "reshape2"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 3
    kernel_size: 4
    kernel_size: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}

layer {
  name: "reshape3"
  type: "Reshape"
  bottom: "conv2"
  top: "reshape3"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 0
      dim: -1 # infer it from the other dimensions
    }
  }
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "reshape3"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "reshape4"
  type: "Reshape"
  bottom: "pool2"
  top: "reshape4"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 3
      dim: 7 # infer it from the other dimensions
      dim: -1
    }
  }
}

layer {
  name: "norm2"
  type: "LRN"
  bottom: "reshape4"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    name: "conv5_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}

layer {
  name: "reshape5"
  type: "Reshape"
  bottom: "conv5"
  top: "reshape5"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 0
      dim: -1 # infer it from the other dimensions
    }
  }
}

layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "reshape6"
  type: "Reshape"
  bottom: "pool5"
  top: "reshape6"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 1
      dim: 0
      dim: -1 # infer it from the other dimensions
    }
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "reshape6"
  top: "fc6"
  param {
    name: "fc6_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}

# Replica Network
# Name params same as previous network.

layer {
  name: "conv1_rep"
  type: "Convolution"
  bottom: "right"
  top: "conv1_rep"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 100
    kernel_size: 3
    kernel_size: 7
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_rep"
  type: "ReLU"
  bottom: "conv1_rep"
  top: "conv1_rep"
}
layer {
  name: "reshape1_rep"
  type: "Reshape"
  bottom: "conv1_rep"
  top: "reshape1_rep"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 0
      dim: -1 # infer it from the other dimensions
    }
  }
}
layer {
  name: "pool1_rep"
  type: "Pooling"
  bottom: "reshape1_rep"
  top: "pool1_rep"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "reshape2_rep"
  type: "Reshape"
  bottom: "pool1_rep"
  top: "reshape2_rep"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 5
      dim: 12 # infer it from the other dimensions
      dim: -1
    }
  }
}

layer {
  name: "norm1_rep"
  type: "LRN"
  bottom: "reshape2_rep"
  top: "norm1_rep"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2_rep"
  type: "Convolution"
  bottom: "norm1_rep"
  top: "conv2_rep"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 3
    kernel_size: 4
    kernel_size: 4
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2_rep"
  type: "ReLU"
  bottom: "conv2_rep"
  top: "conv2_rep"
}


layer {
  name: "reshape3_rep"
  type: "Reshape"
  bottom: "conv2_rep"
  top: "reshape3_rep"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 0
      dim: -1 # infer it from the other dimensions
    }
  }
}

layer {
  name: "pool2_rep"
  type: "Pooling"
  bottom: "reshape3_rep"
  top: "pool2_rep"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "reshape4_rep"
  type: "Reshape"
  bottom: "pool2_rep"
  top: "reshape4_rep"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 3
      dim: 7 # infer it from the other dimensions
      dim: -1
    }
  }
}

layer {
  name: "norm2_rep"
  type: "LRN"
  bottom: "reshape4_rep"
  top: "norm2_rep"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3_rep"
  type: "Convolution"
  bottom: "norm2_rep"
  top: "conv3_rep"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_rep"
  type: "ReLU"
  bottom: "conv3_rep"
  top: "conv3_rep"
}
layer {
  name: "conv4_rep"
  type: "Convolution"
  bottom: "conv3_rep"
  top: "conv4_rep"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4_rep"
  type: "ReLU"
  bottom: "conv4_rep"
  top: "conv4_rep"
}
layer {
  name: "conv5_rep"
  type: "Convolution"
  bottom: "conv4_rep"
  top: "conv5_rep"
  param {
    name: "conv5_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5_rep"
  type: "ReLU"
  bottom: "conv5_rep"
  top: "conv5_rep"
}

layer {
  name: "reshape5_rep"
  type: "Reshape"
  bottom: "conv5_rep"
  top: "reshape5_rep"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 0
      dim: -1 # infer it from the other dimensions
    }
  }
}

layer {
  name: "pool5_rep"
  type: "Pooling"
  bottom: "reshape5_rep"
  top: "pool5_rep"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "reshape6_rep"
  type: "Reshape"
  bottom: "pool5_rep"
  top: "reshape6_rep"
  reshape_param {
    shape {
      dim: 0  # copy the dimension from below
      dim: 0
      dim: 1
      dim: 0
      dim: -1 # infer it from the other dimensions
    }
  }
}

layer {
  name: "fc6_rep"
  type: "InnerProduct"
  bottom: "reshape6_rep"
  top: "fc6_rep"
  param {
    name: "fc6_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6_rep"
  type: "ReLU"
  bottom: "fc6_rep"
  top: "fc6_rep"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6_rep"
  top: "fc6_rep"
  dropout_param {
    dropout_ratio: 0.5
  }
}

# Recombination

layer {
  name: "recombine"
  type: "Concat"
  bottom: "fc6"
  bottom: "fc6_rep"
  top: "recombine"
  concat_param {
    axis: 1
  }
}

layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "recombine"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
}

layer {
  name: "acc"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "acc"
  include: {
    phase: TEST
  }
}