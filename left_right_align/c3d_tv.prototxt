name: "siamese_caffenet_train_val"
# Changes made: changed softmax to sigmoid cross entropy
# Improvements to try: xavier
layer {
  name: "pair_data"
  type: "HDF5Data"
  top: "left"
  top: "right"
  top: "label_bin"
  include {
    phase: TRAIN
  }
  hdf5_data_param {
    source: "/mnt/data/dataset_prepared/examples_train.txt"
    batch_size: 8
  }
}
layer {
  name: "pair_data"
  type: "HDF5Data"
  top: "left"
  top: "right"
  top: "label_bin"
  include {
    phase: TEST
  }
  hdf5_data_param {
    source: "/mnt/data/dataset_prepared/examples_test.txt"
    batch_size: 8
  }
}

# C3D Net

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "left"
  top: "conv1"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 1
    pad: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}

layer {
  name: "rs1a"
  type: "Reshape"
  bottom: "conv1"
  top: "rs1a"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 960
      dim: 64
    }
  }
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "rs1a"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2 # First time just pool over h and w to preserve temporal
    stride: 2
  }
}

layer {
  name: "rs1b"
  type: "Reshape"
  bottom: "pool1"
  top: "rs1b"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 10
      dim: 48
      dim: 32
    }
  }
}

layer {
  name: "bn1"
  type: "BatchNorm"
  bottom: "rs1b"
  top: "bn1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "bn1"
  top: "conv2"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 0
    pad: 1
    pad: 1
    stride: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}

layer {
  name: "bn2"
  type: "BatchNorm"
  bottom: "conv2"
  top: "bn2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "rs2a"
  type: "Reshape"
  bottom: "bn2"
  top: "rs2a"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 384
      dim: 32
    }
  }
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "rs2a"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_h: 4
    kernel_w: 2
    stride_h: 4
    stride_w: 2
  }
}

layer {
  name: "rs2b"
  type: "Reshape"
  bottom: "pool2"
  top: "rs2b"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 4
      dim: 24
      dim: 16
    }
  }
}


layer {
  name: "conv3a"
  type: "Convolution"
  bottom: "rs2b"
  top: "conv3a"
  param {
    name: "conv3a_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu3a"
  type: "ReLU"
  bottom: "conv3a"
  top: "conv3a"
}

layer {
  name: "conv3b"
  type: "Convolution"
  bottom: "conv3a"
  top: "conv3b"
  param {
    name: "conv3b_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu3b"
  type: "ReLU"
  bottom: "conv3b"
  top: "conv3b"
}

layer {
  name: "rs3a"
  type: "Reshape"
  bottom: "conv3b"
  top: "rs3a"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 96
      dim: 16
    }
  }
}

layer {
  name: "pool3"
  type: "Pooling"
  bottom: "rs3a"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_h: 4
    kernel_w: 2
    stride_h: 4
    stride_w: 2
  }
}

layer {
  name: "rs3b"
  type: "Reshape"
  bottom: "pool3"
  top: "rs3b"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 2
      dim: 12
      dim: 8
    }
  }
}

layer {
  name: "bn3"
  type: "BatchNorm"
  bottom: "rs3b"
  top: "bn3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "conv4a"
  type: "Convolution"
  bottom: "bn3"
  top: "conv4a"
  param {
    name: "conv4a_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu4a"
  type: "ReLU"
  bottom: "conv4a"
  top: "conv4a"
}

layer {
  name: "conv4b"
  type: "Convolution"
  bottom: "conv4a"
  top: "conv4b"
  param {
    name: "conv4b_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu4b"
  type: "ReLU"
  bottom: "conv4b"
  top: "conv4b"
}

layer {
  name: "rs4a"
  type: "Reshape"
  bottom: "conv4b"
  top: "rs4a"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 24
      dim: 8
    }
  }
}

layer {
  name: "pool4"
  type: "Pooling"
  bottom: "rs4a"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_h: 4
    kernel_w: 2
    stride_h: 4
    stride_w: 2
  }
}

layer {
  name: "rs4b"
  type: "Reshape"
  bottom: "pool4"
  top: "rs4b"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 2
      dim: 3
      dim: 4
    }
  }
}

layer {
  name: "relu6"
  type: "ReLU"
  bottom: "rs4b"
  top: "rs4b"
}

layer {
  name: "bn4b"
  type: "BatchNorm"
  bottom: "rs4b"
  top: "bn4b"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

# REPLICA
layer {
  name: "conv1_rep"
  type: "Convolution"
  bottom: "right"
  top: "conv1_rep"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 1
    pad: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu1_rep"
  type: "ReLU"
  bottom: "conv1_rep"
  top: "conv1_rep"
}

layer {
  name: "rs1a_rep"
  type: "Reshape"
  bottom: "conv1_rep"
  top: "rs1a_rep"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 960
      dim: 64
    }
  }
}

layer {
  name: "pool1_rep"
  type: "Pooling"
  bottom: "rs1a_rep"
  top: "pool1_rep"
  pooling_param {
    pool: MAX
    kernel_size: 2 # First time just pool over h and w to preserve temporal
    stride: 2
  }
}

layer {
  name: "rs1b_rep"
  type: "Reshape"
  bottom: "pool1_rep"
  top: "rs1b_rep"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 10
      dim: 48
      dim: 32
    }
  }
}

layer {
  name: "bn1_rep"
  type: "BatchNorm"
  bottom: "rs1b_rep"
  top: "bn1_rep"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "conv2_rep"
  type: "Convolution"
  bottom: "bn1_rep"
  top: "conv2_rep"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 0
    pad: 1
    pad: 1
    stride: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu2_rep"
  type: "ReLU"
  bottom: "conv2_rep"
  top: "conv2_rep"
}

layer {
  name: "bn2_rep"
  type: "BatchNorm"
  bottom: "conv2_rep"
  top: "bn2_rep"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "rs2a_rep"
  type: "Reshape"
  bottom: "bn2_rep"
  top: "rs2a_rep"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 384
      dim: 32
    }
  }
}

layer {
  name: "pool2_rep"
  type: "Pooling"
  bottom: "rs2a_rep"
  top: "pool2_rep"
  pooling_param {
    pool: MAX
    kernel_h: 4
    kernel_w: 2
    stride_h: 4
    stride_w: 2
  }
}

layer {
  name: "rs2b_rep"
  type: "Reshape"
  bottom: "pool2_rep"
  top: "rs2b_rep"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 4
      dim: 24
      dim: 16
    }
  }
}


layer {
  name: "conv3a_rep"
  type: "Convolution"
  bottom: "rs2b_rep"
  top: "conv3a_rep"
  param {
    name: "conv3a_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu3a_rep"
  type: "ReLU"
  bottom: "conv3a_rep"
  top: "conv3a_rep"
}

layer {
  name: "conv3b_rep"
  type: "Convolution"
  bottom: "conv3a_rep"
  top: "conv3b_rep"
  param {
    name: "conv3b_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu3b_rep"
  type: "ReLU"
  bottom: "conv3b_rep"
  top: "conv3b_rep"
}

layer {
  name: "rs3a_rep"
  type: "Reshape"
  bottom: "conv3b_rep"
  top: "rs3a_rep"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 96
      dim: 16
    }
  }
}

layer {
  name: "pool3_rep"
  type: "Pooling"
  bottom: "rs3a_rep"
  top: "pool3_rep"
  pooling_param {
    pool: MAX
    kernel_h: 4
    kernel_w: 2
    stride_h: 4
    stride_w: 2
  }
}

layer {
  name: "rs3b_rep"
  type: "Reshape"
  bottom: "pool3_rep"
  top: "rs3b_rep"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 2
      dim: 12
      dim: 8
    }
  }
}

layer {
  name: "bn3_rep"
  type: "BatchNorm"
  bottom: "rs3b_rep"
  top: "bn3_rep"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

layer {
  name: "conv4a_rep"
  type: "Convolution"
  bottom: "bn3_rep"
  top: "conv4a_rep"
  param {
    name: "conv4a_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu4a_rep"
  type: "ReLU"
  bottom: "conv4a_rep"
  top: "conv4a_rep"
}

layer {
  name: "conv4b_rep"
  type: "Convolution"
  bottom: "conv4a_rep"
  top: "conv4b_rep"
  param {
    name: "conv4b_w"
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  name: "relu4b_rep"
  type: "ReLU"
  bottom: "conv4b_rep"
  top: "conv4b_rep"
}

layer {
  name: "rs4a_rep"
  type: "Reshape"
  bottom: "conv4b_rep"
  top: "rs4a_rep"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 24
      dim: 8
    }
  }
}

layer {
  name: "pool4_rep"
  type: "Pooling"
  bottom: "rs4a_rep"
  top: "pool4_rep"
  pooling_param {
    pool: MAX
    kernel_h: 4
    kernel_w: 2
    stride_h: 4
    stride_w: 2
  }
}

layer {
  name: "rs4b_rep"
  type: "Reshape"
  bottom: "pool4_rep"
  top: "rs4b_rep"
  reshape_param {
    shape {
      dim: 0
      dim: 0
      dim: 2
      dim: 3
      dim: 4
    }
  }
}

layer {
  name: "relu6_rep"
  type: "ReLU"
  bottom: "rs4b_rep"
  top: "rs4b_rep"
}

layer {
  name: "bn4b_rep"
  type: "BatchNorm"
  bottom: "rs4b_rep"
  top: "bn4b_rep"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}

# Name params same as previous network.

# Recombination

layer {
  name: "recombine"
  type: "Concat"
  bottom: "bn4b"
  bottom: "bn4b_rep"
  top: "recombine"
  concat_param {
    axis: 1
  }
}

layer {
  name: "fc5"
  type: "InnerProduct"
  bottom: "recombine"
  top: "fc5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc5"
  top: "fc5"
}

layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "fc5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc6"
  bottom: "label_bin"
  top: "loss"
}

layer {
  name: "acc"
  type: "Accuracy"
  bottom: "fc6"
  bottom: "label_bin"
  top: "acc"
  include: {
    phase: TEST
  }
}
